/**
 * @author psj
 * @date 2022/6/28 9:41
 * @File: 数组中数字出现的次数Ⅰ56.java
 * @Software: IntelliJ IDEA
 */
// https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/
// 一个整型数组nums里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字
// 要求时间复杂度是O(n)，空间复杂度是O(1)

public class 数组中数字出现的次数Ⅰ56 {
    // 假设数组为[1,1,2,2,6],整个数组异或后就剩下6
    // 初始数组为[1,1,2,2,6,8],整个数组异或后剩下z=6^8=1110,无法从z判断剩下的是哪两个数
    // 所以需要将数组分为两个部分，并且这两个部分分别包括6和8，且不能将原本相同的两个数拆分到不同数组中
    // 拆分方法:
    // 1.计算出z的二进制表示位数为1的最低位，比如z=1110,则最低位为2(从右到左),令m=10
    // 2.将数组每个元素和m进行与操作，结果为0的分为一组，结果为1的分为另一组
    //   这样做的目的首先可以将6和8分到两组中(z二进制中第二个1就是因为6和8在第二位上不相同)
    //   并且原数组中相同的数肯定也是分在同一组的，至于是那一组不重要
    // 3.将两个数组分别进行异或，得出每个数组中单个元素
    public int[] singleNumbers(int[] nums) {
        // 记录整个数组的异或结果
        int z = 0;
        for (int num : nums) {
            z ^= num;
        }
        int m = 1;
        // 找出z的最低位的1
        while ((z & m) == 0) {
            m <<= 1;
        }
        int x = 0, y = 0;  // 设置为0是因为0和任何数异或都为该数本身
        for (int num : nums) {
            if ((num & m) == 0) {
                // 按照流程应该将num放到某个数组中，这里直接每个符合条件的num进行异或
                x ^= num;
            } else {
                // 这里相当于分到另一组，将另一组的所有数进行异或
                y ^= num;
            }
        }
        return new int[]{x, y};
    }

}
